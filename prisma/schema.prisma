// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

enum Role {
  USER
  ADMIN
}

model User {
  id Int @id @default(autoincrement())
  email String  @unique
  password String
  userName  String
  enterprises Enterprise[]
  role Role @default(USER)
  sales Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Enterprise {
  id Int @id @default(autoincrement())
  enterpriseName String
  logo String?
  users User[]
  products Product[]
  addresses Address[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id Int @id @default(autoincrement())
  officeName String
  address String
  city String
  country String
  state String
  postalCode Int
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])
  enterpriseId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  nameProduct     String
  imageProduct String?
  priceLocal Float
  priceNacional Float?
  priceExt Float?
  descriptionProduct String?
  stockProduct Int?
  unitsPackage Int
  categories Category[]
  published Boolean @default(false)
  enterpriseId  Int
  enterprise    Enterprise    @relation(fields: [enterpriseId], references: [id])
  sales Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  categoryName String
  imageCategory String?
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id Int @id @default(autoincrement())
  userId Int
  totalSale Float
  products Product[]
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}